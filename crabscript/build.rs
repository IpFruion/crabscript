use std::path::Path;

use quote::{format_ident, quote};
use stringcase::pascal_case;

fn main() {
    let language: tree_sitter::Language = tree_sitter_crabscript::LANGUAGE.into();

    let out_dir = std::env::var("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("node_kind.rs");

    let kinds = (0..language.node_kind_count()).filter_map(|i| {
        language
            .node_kind_for_id(i as u16)
            .filter(|_| language.node_kind_is_visible(i as u16))
            .filter(|s| s.len() > 1)
            .map(|name| {
                let name = format_ident!("{}", pascal_case(name));
                let i = i as isize;
                quote! {#name = #i}
            })
    });

    let fields = (1..(language.field_count() + 1)).filter_map(|i| {
        language.field_name_for_id(i as u16).map(|name| {
            let name = format_ident!("{}", pascal_case(name));
            let i = i as isize;
            quote! {#name = #i}
        })
    });

    let contents = quote! {
        ///*NOTE* This is autogenerated do not edit

        #[allow(unused)]
        #[non_exhaustive]
        #[derive(Clone, Copy)]
        pub enum NodeKind {
            #(#kinds),*
        }

        impl std::cmp::PartialEq<u16> for NodeKind {
            fn eq(&self, other: &u16) -> bool {
                *self as u16 == *other
            }
        }

        impl std::cmp::PartialEq<NodeKind> for u16 {
            fn eq(&self, other: &NodeKind) -> bool {
                *self == *other as u16
            }
        }

        #[allow(unused)]
        #[non_exhaustive]
        #[derive(Clone, Copy)]
        pub enum Field {
            #(#fields),*
        }

        impl std::cmp::PartialEq<u16> for Field {
            fn eq(&self, other: &u16) -> bool {
                *self as u16 == *other
            }
        }

        impl std::cmp::PartialEq<Field> for u16 {
            fn eq(&self, other: &Field) -> bool {
                *self == *other as u16
            }
        }

        impl std::cmp::PartialEq<Field> for std::num::NonZero<u16> {
            fn eq(&self, other: &Field) -> bool {
                self.get() == *other as u16
            }
        }
        impl std::cmp::PartialEq<std::num::NonZero<u16>> for Field {
            fn eq(&self, other: &std::num::NonZero<u16>) -> bool {
                *self as u16 == other.get()
            }
        }
    };

    std::fs::write(dest_path, contents.to_string()).unwrap();
}
